import lief
import os
import re
from pprint import pprint

def extract_features(path: str):
    try:
        binary = lief.parse(path);
    except Exception as e:
        print(f"Failed to parse file path: {e}");
        return None;
    
    # print(binary);

    features = {};

    features["file_size"] = os.path.getsize(path);
    features["virtual_size"] = binary.optional_header.sizeof_image if binary.optional_header else 0

    #Imports/Exports
    features["imports"] = len(binary.imports);
    features["exports"] = len(binary.exported_functions);
    
    #Section
    features["sections"] = len(binary.sections);

    #Signatures 
    features["has_signature"] = 1 if binary.has_signatures else 0 
    features["has_tls"] = 1 if binary.has_tls else 0

    #Entropy
    text_entropy, rsrc_entropy = 0.0, 0.0
    for sec in binary.sections:
        if sec.name == ".text":
            text_entropy = sec.entropy
        if sec.name == ".rsrc":
            rsrc_entropy = sec.entropy

    features["text_entropy"] = text_entropy
    features["rsrc_entropy"] = rsrc_entropy

    return features;
